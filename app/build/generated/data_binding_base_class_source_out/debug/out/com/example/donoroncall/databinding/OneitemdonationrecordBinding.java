// Generated by view binder compiler. Do not edit!
package com.example.donoroncall.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.donoroncall.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OneitemdonationrecordBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final View divider;

  @NonNull
  public final TextView donername;

  @NonNull
  public final TextView hospitalname;

  @NonNull
  public final TextView quantity;

  @NonNull
  public final TextView recorddate;

  @NonNull
  public final TextView recordid;

  private OneitemdonationrecordBinding(@NonNull RelativeLayout rootView, @NonNull View divider,
      @NonNull TextView donername, @NonNull TextView hospitalname, @NonNull TextView quantity,
      @NonNull TextView recorddate, @NonNull TextView recordid) {
    this.rootView = rootView;
    this.divider = divider;
    this.donername = donername;
    this.hospitalname = hospitalname;
    this.quantity = quantity;
    this.recorddate = recorddate;
    this.recordid = recordid;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OneitemdonationrecordBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OneitemdonationrecordBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.oneitemdonationrecord, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OneitemdonationrecordBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.donername;
      TextView donername = ViewBindings.findChildViewById(rootView, id);
      if (donername == null) {
        break missingId;
      }

      id = R.id.hospitalname;
      TextView hospitalname = ViewBindings.findChildViewById(rootView, id);
      if (hospitalname == null) {
        break missingId;
      }

      id = R.id.quantity;
      TextView quantity = ViewBindings.findChildViewById(rootView, id);
      if (quantity == null) {
        break missingId;
      }

      id = R.id.recorddate;
      TextView recorddate = ViewBindings.findChildViewById(rootView, id);
      if (recorddate == null) {
        break missingId;
      }

      id = R.id.recordid;
      TextView recordid = ViewBindings.findChildViewById(rootView, id);
      if (recordid == null) {
        break missingId;
      }

      return new OneitemdonationrecordBinding((RelativeLayout) rootView, divider, donername,
          hospitalname, quantity, recorddate, recordid);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
